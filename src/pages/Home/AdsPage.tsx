import React, { useState, useEffect } from 'react';
import Header from '../../components/layout/Header';
import Footer from '../../components/layout/Footer';
import { FaCheck } from 'react-icons/fa';
import Swal from 'sweetalert2';
import { getUserIdFromToken, isTokenExpired } from '../../utils/auth';
import { CreateAdvertisementModel, AdvertisementService, AdvertisementPackageModel } from '../../services/advertisementService';
import { EmployerService } from '../../services/employerService';
import AdvertisementModal, { AdvertisementFormData } from '../../components/Advertisement/AdvertisementModal';
import AdvertisementPaymentModal from '../../components/Advertisement/AdvertisementPaymentModal';
import { FirebaseStorageService } from '../../services/firebaseStorageService';

const AdsPage: React.FC = () => {
    const [packages, setPackages] = useState<AdvertisementPackageModel[]>([]);
    const [loading, setLoading] = useState(true);
    const [selectedPackage, setSelectedPackage] = useState<AdvertisementPackageModel | null>(null);
    const [isAdModalOpen, setIsAdModalOpen] = useState(false);
    const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
    const [advertisementData, setAdvertisementData] = useState<AdvertisementFormData | null>(null);
    const [employerId, setEmployerId] = useState<number | null>(null);

    // Fetch advertisement packages on component mount
    useEffect(() => {
        const fetchPackages = async () => {
            try {
                const activePackages = await AdvertisementService.getAllActivePackages();
                setPackages(activePackages);
            } catch (error) {
                console.error('Error fetching advertisement packages:', error);
                Swal.fire('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch g√≥i qu·∫£ng c√°o', 'error');
            } finally {
                setLoading(false);
            }
        };

        fetchPackages();
    }, []);

    // Get employer information if user is logged in
    useEffect(() => {
        const checkEmployerStatus = async () => {
            try {
                const userId = getUserIdFromToken();
                if (userId && !isTokenExpired()) {
                    const employerProfile = await EmployerService.getProfile();
                    console.log('Employer Profile:', employerProfile); // Debug log
                    if (employerProfile?.employerId) {
                        setEmployerId(employerProfile.employerId);
                    }
                }
            } catch (error) {
                console.log('User is not an employer or not logged in:', error);
            }
        };

        checkEmployerStatus();
    }, []);

    // Check if user is logged in
    const isUserLoggedIn = (): boolean => {
        const userId = getUserIdFromToken();
        return !!(userId && !isTokenExpired());
    };

    // Handle "Mua g√≥i" button click
    const handlePurchaseClick = (packageData: AdvertisementPackageModel) => {
        if (!isUserLoggedIn()) {
            // Show SweetAlert and redirect to login
            Swal.fire({
                title: 'ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c',
                text: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ mua g√≥i qu·∫£ng c√°o',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'ƒêƒÉng nh·∫≠p ngay',
                cancelButtonText: 'H·ªßy',
                confirmButtonColor: '#309689',
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
            return;
        }

        if (!employerId) {
            Swal.fire({
                title: 'T√†i kho·∫£n kh√¥ng h·ª£p l·ªá',
                text: 'Ch·ªâ t√†i kho·∫£n nh√† tuy·ªÉn d·ª•ng m·ªõi c√≥ th·ªÉ mua g√≥i qu·∫£ng c√°o',
                icon: 'warning',
                confirmButtonText: 'OK',
                confirmButtonColor: '#309689',
            });
            return;
        }

        // Show advertisement modal
        setSelectedPackage(packageData);
        setIsAdModalOpen(true);
    };

    // Handle proceeding to payment
    const handleProceedToPayment = (adData: AdvertisementFormData) => {
        setAdvertisementData(adData);
        setIsAdModalOpen(false);
        setIsPaymentModalOpen(true);
    };

    // Handle payment success
    const handlePaymentSuccess = async (transactionId: string) => {
        if (!advertisementData || !employerId || !selectedPackage) return;

        try {
            // Handle image upload to Firebase
            let imageUrl = "";
            if (advertisementData.imageFile) {
                try {
                    console.log('üöÄ Starting image upload to Firebase...');

                    const userId = getUserIdFromToken();
                    if (!userId) {
                        throw new Error('Unable to get user ID from token');
                    }

                    // Upload image to Firebase Storage
                    imageUrl = await FirebaseStorageService.uploadImage(
                        advertisementData.imageFile,
                        userId,
                        'advertisements'
                    );
                    console.log('‚úÖ Image uploaded successfully to Firebase:', imageUrl);
                } catch (uploadError) {
                    console.error('‚ùå Error uploading image to Firebase:', uploadError);
                    Swal.fire('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i l√™n h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
                    return;
                }
            }

            // Calculate dates - start now, end after package duration
            const startDate = new Date();
            const endDate = new Date();
            endDate.setDate(startDate.getDate() + selectedPackage.durationDays);

            // Map adPosition from API to expected values
            let mappedAdPosition = selectedPackage.adPosition;
            if (selectedPackage.adPosition === 'TOP') {
                mappedAdPosition = 'Top';
            } else if (selectedPackage.adPosition === 'MIDDLE') {
                mappedAdPosition = 'Sidebar';
            } else if (selectedPackage.adPosition === 'BOTTOM') {
                mappedAdPosition = 'DetailPage';
            }

            // Create advertisement according to API specification
            const createAdData: CreateAdvertisementModel = {
                employerId: employerId,
                advertisementPackageId: selectedPackage.id,
                adTitle: advertisementData.title,
                adDescription: advertisementData.description,
                imageUrl: imageUrl,
                adPosition: mappedAdPosition,
                startDate: startDate.toISOString(),
                endDate: endDate.toISOString(),
                price: selectedPackage.price,
                maxImpressions: 1, // Default as specified in requirements
                transactionId: transactionId
            };

            console.log('üì§ Creating advertisement with Firebase image URL:', createAdData);
            await AdvertisementService.createAdvertisement(createAdData);

            // Close modals and show success message
            setIsPaymentModalOpen(false);
            setIsAdModalOpen(false);
            setSelectedPackage(null);
            setAdvertisementData(null);

            Swal.fire({
                title: 'Thanh to√°n th√†nh c√¥ng!',
                text: 'Qu·∫£ng c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† s·∫Ω ƒë∆∞·ª£c xem x√©t trong v√≤ng 24 gi·ªù.',
                icon: 'success',
                confirmButtonText: 'OK',
                confirmButtonColor: '#309689',
            });

        } catch (error) {
            console.error('Error creating advertisement:', error);
            Swal.fire('L·ªói', 'C√≥ l·ªói x·∫£y ra khi t·∫°o qu·∫£ng c√°o. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.', 'error');
        }
    };

    // Close modals
    const handleCloseModals = () => {
        setIsAdModalOpen(false);
        setIsPaymentModalOpen(false);
        setSelectedPackage(null);
        setAdvertisementData(null);
    };

    return (
        <div className="min-h-screen bg-white">
            <Header />

            {/* Hero Banner */}
            <div className="bg-black text-white py-12 text-center">
                <h1 className="text-5xl font-bold">Qu·∫£ng c√°o</h1>
            </div>

            {/* Main content */}
            <div className="container mx-auto px-4 max-w-[90%] py-12">
                {/* Intro Section */}
                <div className="text-center mb-16">
                    <h2 className="text-5xl font-bold mb-6">B·∫°n c√≥ nhu c·∫ßu ƒëƒÉng qu·∫£ng c√°o?</h2>
                    <p className="text-gray-600 mb-16 max-w-3xl mx-auto">Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n ƒë·ªÉ ƒëƒÉng qu·∫£ng c√°o ph√π h·ª£p v·ªõi nhu c·∫ßu.</p>

                    {/* Features */}
                    <div className="flex flex-col md:flex-row justify-center gap-12 mb-16 max-w-4xl mx-auto">
                        <div className="bg-[#F0F9F6] p-6 rounded-lg flex items-center gap-5">
                            <div className="bg-white p-3 rounded-lg">
                                <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                                    <rect width="24" height="24" rx="4" fill="white" />
                                    <path d="M6 10H18V14H6V10ZM4 8V16H20V8H4Z" fill="#2A9D8F" />
                                </svg>
                            </div>
                            <span className="font-medium text-xl">Th∆∞∆°ng hi·ªáu th√¥ng qua s√°ng t·∫°o</span>
                        </div>

                        <div className="bg-[#F0F9F6] p-6 rounded-lg flex items-center gap-5">
                            <div className="bg-white p-3 rounded-lg">
                                <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                                    <rect width="24" height="24" rx="4" fill="white" />
                                    <path d="M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16ZM12 18C8.68629 18 6 15.3137 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18Z" fill="#2A9D8F" />
                                    <path d="M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z" fill="#2A9D8F" />
                                </svg>
                            </div>
                            <span className="font-medium text-xl">Ti·ªÅm nƒÉng v·ªõi s·ª± ƒë·ªïi m·ªõi</span>
                        </div>
                    </div>
                </div>

                {/* Brand Importance Section */}
                <div className="mb-16">
                    <h2 className="text-4xl font-bold mb-8">N∆°i th∆∞∆°ng hi·ªáu c·ªßa b·∫°n ƒë∆∞·ª£c <span className="text-[#2A9D8F] italic">Ch√∫ tr·ªçng!</span></h2>
                    <p className="text-gray-600 mb-10">Cho d√π b·∫°n mu·ªën n√¢ng cao nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu, tƒÉng c∆∞·ªùng t∆∞∆°ng t√°c hay th·ª±c ƒë·∫©y doanh s·ªë, c√°c gi·∫£i ph√°p t√πy ch·ªânh c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ƒë√°p ·ª©ng nhu c·∫ßu ri√™ng c·ªßa b·∫°n. H·ª£p t√°c v·ªõi ch√∫ng t√¥i ƒë·ªÉ bi·∫øn t·∫ßm nh√¨n c·ªßa b·∫°n th√†nh m·ªôt c√¢u chuy·ªán h·∫•p d·∫´n.</p>

                    {/* Service grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                        {/* Service 1 */}
                        <div className="border border-teal-600 rounded-lg p-8">
                            <div className="flex items-start gap-6 mb-4">
                                <div className="bg-[#F0F9F6] p-4 rounded-lg shrink-0">
                                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="24" height="24" rx="4" fill="white" />
                                        <path d="M6 10H18V14H6V10ZM4 8V16H20V8H4Z" fill="#2A9D8F" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="text-2xl font-bold mb-3">Gi·∫£i ph√°p s√°ng t·∫°o cho k·ª≥ nguy√™n s·ªë</h3>
                                    <p className="text-gray-600">Ch√∫ng t√¥i k·∫øt h·ª£p c√¥ng ngh·ªá v√† d·ªØ li·ªáu ƒë·ªÉ t·∫°o ra gi·∫£i ph√°p s√°ng t·∫°o, gi√∫p doanh nghi·ªáp n√¢ng cao tr·∫£i nghi·ªám kh√°ch h√†ng v√† t·ªëi ∆∞u h√≥a gi√° tr·ªã th∆∞∆°ng hi·ªáu.</p>
                                </div>
                            </div>
                        </div>

                        {/* Service 2 */}
                        <div className="border border-teal-600 rounded-lg p-8">
                            <div className="flex items-start gap-6 mb-4">
                                <div className="bg-[#F0F9F6] p-4 rounded-lg shrink-0">
                                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="24" height="24" rx="4" fill="white" />
                                        <path d="M12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z" fill="#2A9D8F" />
                                        <path d="M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16ZM12 18C8.68629 18 6 15.3137 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18Z" fill="#2A9D8F" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="text-2xl font-bold mb-3">Bi·∫øn ƒë·ªïi √Ω t∆∞·ªüng th√†nh k·ªπ thu·∫≠t s·ªë</h3>
                                    <p className="text-gray-600">Ch√∫ng t√¥i gi√∫p hi·ªán th·ª±c h√≥a √Ω t∆∞·ªüng s√°ng t·∫°o b·∫±ng c√¥ng ngh·ªá s·ªë, t·ªëi ∆∞u quy tr√¨nh v·∫≠n h√†nh v√† n√¢ng cao kh·∫£ nƒÉng ti·∫øp c·∫≠n kh√°ch h√†ng.</p>
                                </div>
                            </div>
                        </div>

                        {/* Service 3 */}
                        <div className="border border-teal-600 rounded-lg p-8 bg-[#F0F9F6]">
                            <div className="flex items-start gap-6 mb-4">
                                <div className="bg-white p-4 rounded-lg shrink-0">
                                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="24" height="24" rx="4" fill="white" />
                                        <path d="M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z" fill="#2A9D8F" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="text-2xl font-bold mb-3">T·∫°o ra gi√° tr·ªã kh√°c bi·ªát</h3>
                                    <p className="text-gray-600">S·ª± s√°ng t·∫°o kh√¥ng ch·ªâ gi√∫p b·∫°n n·ªïi b·∫≠t, m√† c√≤n gi√∫p b·∫°n d·∫´n ƒë·∫ßu. Ch√∫ng t√¥i k·∫øt h·ª£p t∆∞ duy ƒë·ªïi m·ªõi v·ªõi chi·∫øn l∆∞·ª£c d·ªØ li·ªáu ƒë·ªÉ x√¢y d·ª±ng nh·ªØng chi·∫øn d·ªãch ƒë·ªôc ƒë√°o.</p>
                                </div>
                            </div>
                        </div>

                        {/* Service 4 */}
                        <div className="border border-teal-600 rounded-lg p-8">
                            <div className="flex items-start gap-6 mb-4">
                                <div className="bg-[#F0F9F6] p-4 rounded-lg shrink-0">
                                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="24" height="24" rx="4" fill="white" />
                                        <path d="M7 14H17V18H7V14ZM5 12V20H19V12H5Z" fill="#2A9D8F" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="text-2xl font-bold mb-3">N∆°i S√°ng t·∫°o g·∫∑p Chi·∫øn l∆∞·ª£c</h3>
                                    <p className="text-gray-600">T·ª´ √Ω t∆∞·ªüng ƒë·∫øn th·ª±c thi, ch√∫ng t√¥i gi√∫p b·∫°n khai th√°c s·ª©c m·∫°nh c·ªßa s√°ng t·∫°o ƒë·ªÉ thu h√∫t kh√°ch h√†ng v√† t·ªëi ƒëa h√≥a hi·ªáu qu·∫£ kinh doanh.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Pricing Section */}
                <div className="mb-12">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
                        <div>
                            <h2 className="text-6xl font-bold leading-tight text-left">ƒê·ªìng h√†nh v·ªõi <br />ch√∫ng t√¥i</h2>
                        </div>
                        <div className="flex items-center">
                            <p className="text-gray-600 text-left">Cho d√π b·∫°n ƒëang mu·ªën n√¢ng cao nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu, tƒÉng c∆∞·ªùng s·ª± t∆∞∆°ng t√°c hay th·ª±c ƒë·∫©y doanh s·ªë, c√°c gi·∫£i ph√°p ph√π h·ª£p c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ƒë√°p ·ª©ng</p>
                        </div>
                    </div>

                    {/* Pricing Cards */}
                    {loading ? (
                        <div className="flex justify-center items-center py-12">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-500"></div>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                            {packages.map((pkg, index) => (
                                <div
                                    key={pkg.id}
                                    className={`border border-teal-500 rounded-3xl flex flex-col h-full overflow-hidden ${index === 1 ? 'bg-[#F0F9F6]' : ''
                                        }`}
                                >
                                    <div className="p-6 border-b border-teal-500 text-left">
                                        <h3 className="font-medium text-lg">{pkg.packageName}</h3>
                                    </div>

                                    <div className="p-6 pb-2">
                                        <h2 className="text-5xl font-bold">
                                            {new Intl.NumberFormat('vi-VN', {
                                                style: 'currency',
                                                currency: 'VND'
                                            }).format(pkg.price)}
                                        </h2>
                                    </div>

                                    <div className="px-6 pt-20 pb-4 flex-grow">
                                        <div className="space-y-5">
                                            {index === 0 && (
                                                <>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>Qu·∫£ng c√°o hi·ªÉn trong trang chi ti·∫øt</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>T·ªëi ƒëa 3 chi·∫øn d·ªãch</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>B√°o c√°o h√†ng th√°ng</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>T·ªìn t·∫°i 30 ng√†y</span>
                                                    </div>
                                                </>
                                            )}
                                            {index === 1 && (
                                                <>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>Qu·∫£ng c√°o hi·ªÉn ·ªü tr√°i/ ph·∫£i trang ch·ªß</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>T·ªëi ƒëa 6 chi·∫øn d·ªãch</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>B√°o c√°o hai tu·∫ßn m·ªôt l·∫ßn</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>T·ªìn t·∫°i 30 ng√†y</span>
                                                    </div>
                                                </>
                                            )}
                                            {index === 2 && (
                                                <>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>Qu·∫£ng c√°o hi·ªÉn ·ªü ƒë·∫ßu trang ch·ªß</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>Kh√¥ng gi·ªõi h·∫°n chi·∫øn d·ªãch</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>B√°o c√°o h√†ng tu·∫ßn</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>T·ªìn t·∫°i 30 ng√†y</span>
                                                    </div>
                                                </>
                                            )}
                                            {index > 2 && (
                                                <>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>V·ªã tr√≠: {pkg.adPosition}</span>
                                                    </div>
                                                    <div className="flex items-center gap-3">
                                                        <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                            <FaCheck className="text-sm" />
                                                        </div>
                                                        <span>Th·ªùi h·∫°n: {pkg.durationDays} ng√†y</span>
                                                    </div>
                                                    {pkg.maxImpressions && (
                                                        <div className="flex items-center gap-3">
                                                            <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                                <FaCheck className="text-sm" />
                                                            </div>
                                                            <span>T·ªëi ƒëa {pkg.maxImpressions.toLocaleString()} l∆∞·ª£t hi·ªÉn th·ªã</span>
                                                        </div>
                                                    )}
                                                    {pkg.description && (
                                                        <div className="flex items-center gap-3">
                                                            <div className="rounded-full bg-teal-500 w-6 h-6 flex items-center justify-center text-white">
                                                                <FaCheck className="text-sm" />
                                                            </div>
                                                            <span>{pkg.description}</span>
                                                        </div>
                                                    )}
                                                </>
                                            )}
                                        </div>
                                    </div>

                                    <div className="p-6 pt-20 mt-auto">
                                        <button
                                            onClick={() => handlePurchaseClick(pkg)}
                                            className="border border-teal-500 text-teal-500 py-4 px-8 rounded-full hover:bg-teal-500 hover:text-white transition duration-300 w-full text-center text-lg"
                                        >
                                            Mua g√≥i
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            <Footer />

            {/* Advertisement Modal */}
            <AdvertisementModal
                isOpen={isAdModalOpen}
                onClose={handleCloseModals}
                selectedPackage={selectedPackage}
                onProceedToPayment={handleProceedToPayment}
            />

            {/* Advertisement Payment Modal */}
            <AdvertisementPaymentModal
                isOpen={isPaymentModalOpen}
                onClose={handleCloseModals}
                advertisementData={advertisementData}
                onPaymentSuccess={handlePaymentSuccess}
            />
        </div>
    );
};

export default AdsPage; 