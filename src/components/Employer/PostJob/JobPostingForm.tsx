import React, { useState } from 'react';
import { getUserIdFromToken } from '../../../utils/auth';
import { SubscriptionService } from '../../../services/subscriptionService';
import { JobPostingService } from '../../../services/jobPostingService';
import JobPromotionPopup from './JobPromotionPopup';

const JobPostingForm: React.FC = () => {
    // Form state
    const [title, setTitle] = useState('');
    const [jobType, setJobType] = useState('');
    const [salaryRangeTo, setSalaryRangeTo] = useState('');
    const [salaryType, setSalaryType] = useState('');
    const [education, setEducation] = useState('');
    const [experience, setExperience] = useState('');
    const [workType, setWorkType] = useState('');
    const [location, setLocation] = useState('');
    const [expirationDate, setExpirationDate] = useState('');
    const [description, setDescription] = useState('');
    const [responsibilities, setResponsibilities] = useState('');
    const [applicationType, setApplicationType] = useState<'internal' | 'external' | 'email'>('internal');

    // Popup state
    const [showPromotionPopup, setShowPromotionPopup] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);

    // City mapping
    const getCityData = (locationValue: string) => {
        switch (locationValue) {
            case 'ho-chi-minh':
                return { cityId: 1, location: 'H·ªì Ch√≠ Minh' };
            case 'da-nang':
                return { cityId: 2, location: 'ƒê√† N·∫µng' };
            case 'ha-noi':
                return { cityId: 3, location: 'H√† N·ªôi' };
            default:
                return { cityId: 1, location: 'H·ªì Ch√≠ Minh' };
        }
    };

    // Handle form submission
    const handleSubmit = (e: React.MouseEvent) => {
        e.preventDefault();

        // Basic validation
        if (!title.trim()) {
            alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ c√¥ng vi·ªác');
            return;
        }
        if (!jobType) {
            alert('Vui l√≤ng ch·ªçn vai tr√≤ c√¥ng vi·ªác');
            return;
        }
        if (!salaryRangeTo.trim()) {
            alert('Vui l√≤ng nh·∫≠p m·ª©c l∆∞∆°ng t·ªëi ƒëa');
            return;
        }
        if (!expirationDate) {
            alert('Vui l√≤ng ch·ªçn ng√†y h·∫øt h·∫°n');
            return;
        }

        setShowPromotionPopup(true);
    };

    // Handle job posting API call
    const handleJobPosting = async (isUrgent: boolean, isHighlighted: boolean) => {
        setIsSubmitting(true);

        try {
            // Get user authentication
            const userId = getUserIdFromToken();
            if (!userId) {
                throw new Error('User not authenticated');
            }

            // Get employer profile to get employerId
            const employerProfile = await SubscriptionService.getEmployerProfile();
            if (!employerProfile || !employerProfile.employerId) {
                throw new Error('Could not get employer profile');
            }

            // Get user's subscription
            const subscriptions = await SubscriptionService.getSubscriptionsByEmployer(employerProfile.employerId);
            if (!subscriptions || subscriptions.length === 0) {
                throw new Error('No active subscription found');
            }

            // Use the first active subscription
            const activeSubscription = subscriptions[0];

            // Prepare data
            const cityData = getCityData(location);
            const currentDate = new Date();
            const expDate = new Date(expirationDate);

            // Combine requirements
            const requirements = [
                education ? `H·ªçc v·∫•n: ${education}` : '',
                experience ? `Kinh nghi·ªám: ${experience}` : '',
                workType ? `Lo·∫°i c√¥ng vi·ªác: ${workType}` : ''
            ].filter(Boolean).join(' - ');

            // Combine description and responsibilities
            const combinedDescription = [
                description ? `M√¥ t·∫£: ${description}` : '',
                responsibilities ? `Tr√°ch nhi·ªám: ${responsibilities}` : ''
            ].filter(Boolean).join(' - ');

            // Prepare API payload
            const jobData = {
                employerId: employerProfile.employerId,
                subscriptionId: activeSubscription.id,
                cityId: cityData.cityId,
                title: title.trim(),
                description: combinedDescription,
                location: cityData.location,
                startTime: currentDate.toISOString(),
                endTime: expDate.toISOString(),
                hourlyRate: parseFloat(salaryRangeTo) || 0,
                jobType: jobType,
                requirements: requirements,
                expiresAt: expDate.toISOString(),
                isUrgent: isUrgent,
                isHighlighted: isHighlighted
            };

            // Log the API payload in JSON format
            console.log('üöÄ API Payload being sent to /api/jobposting:');
            console.log(JSON.stringify(jobData, null, 2));

            // Call the API
            const response = await JobPostingService.createJobPosting(jobData);

            if (response) {
                // Success - redirect to dashboard or show success message
                alert('C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!');
                window.location.href = '/employer/dashboard';
            }

        } catch (error) {
            console.error('Error posting job:', error);
            alert('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng c√¥ng vi·ªác. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsSubmitting(false);
            setShowPromotionPopup(false);
        }
    };

    return (
        <>
            <style>
                {`
                    .submit-button {
                        background-color: #1CB99E;
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 0.375rem;
                        display: flex;
                        align-items: center;
                        font-weight: 500;
                        border: none;
                        cursor: pointer;
                        transition: background-color 0.2s;
                    }
                    
                    .submit-button:hover {
                        background-color: #19a38b;
                    }
                    
                    .submit-button svg {
                        margin-left: 0.5rem;
                        width: 1.25rem;
                        height: 1.25rem;
                    }
                `}
            </style>
            <div className="flex-1">
                <div className="mb-8">
                    <h1 className="text-2xl font-semibold mb-4 text-left">ƒêƒÉng vi·ªác l√†m</h1>

                    {/* Job Title Section */}
                    <div className="mb-8">
                        <h2 className="text-base font-medium mb-4 text-left">Ti√™u ƒë·ªÅ c√¥ng vi·ªác</h2>
                        <input
                            type="text"
                            placeholder="Th√™m danh hi·ªáu c√¥ng vi·ªác, vai tr√≤, v·ªã tr√≠ tuy·ªÉn d·ª•ng, v.v..."
                            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689]"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                        />
                    </div>

                    {/* Job Type Section */}
                    <div className="mb-8">
                        <div className="flex flex-col md:flex-row justify-between gap-4 mb-4">
                            <div className="md:w-2/3">
                                <h2 className="text-base font-medium mb-2 text-left">Th·ªÉ</h2>
                                <input
                                    type="text"
                                    placeholder="T·ª´ kh√≥a c√¥ng vi·ªác, th·∫ª, v.v..."
                                    className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689]"
                                />
                            </div>
                            <div className="md:w-1/3">
                                <h2 className="text-base font-medium mb-2 text-left">Vai tr√≤ c√¥ng vi·ªác</h2>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={jobType}
                                        onChange={(e) => setJobType(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="FullTime">Full-time</option>
                                        <option value="PartTime">Part-time</option>
                                        <option value="Contract">Contract</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Salary Section */}
                    <div className="mb-8">
                        <h2 className="text-base font-medium mb-4 text-left">Thu nh·∫≠p</h2>
                        <div className="flex flex-col md:flex-row gap-4 mb-4">
                            <div className="md:w-1/3">
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu</h3>
                                <div className="flex">
                                    <input
                                        type="text"
                                        placeholder="L∆∞∆°ng t·ªëi thi·ªÉu..."
                                        className="w-full p-3 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] opacity-50"
                                        disabled
                                    />
                                    <div className="bg-gray-100 flex items-center justify-center px-4 border-t border-r border-b border-gray-300 rounded-r-md">
                                        <span className="text-gray-600">VNƒê</span>
                                    </div>
                                </div>
                            </div>

                            <div className="md:w-1/3">
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">M·ª©c l∆∞∆°ng t·ªëi ƒëa</h3>
                                <div className="flex">
                                    <input
                                        type="number"
                                        placeholder="L∆∞∆°ng t·ªëi ƒëa..."
                                        className="w-full p-3 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689]"
                                        value={salaryRangeTo}
                                        onChange={(e) => setSalaryRangeTo(e.target.value)}
                                    />
                                    <div className="bg-gray-100 flex items-center justify-center px-4 border-t border-r border-b border-gray-300 rounded-r-md">
                                        <span className="text-gray-600">VNƒê</span>
                                    </div>
                                </div>
                            </div>

                            <div className="md:w-1/3">
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Ki·ªÉu L∆∞∆°ng</h3>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={salaryType}
                                        onChange={(e) => setSalaryType(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="monthly">H√†ng th√°ng</option>
                                        <option value="annual">H√†ng nƒÉm</option>
                                        <option value="hourly">Theo gi·ªù</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Job Role and Salary Type */}
                    <div className="mb-8 grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div>
                            <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Vai tr√≤ c√¥ng vi·ªác</h3>
                            <div className="relative">
                                <select
                                    className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                    value={jobType}
                                    onChange={(e) => setJobType(e.target.value)}
                                >
                                    <option value="">Ch·ªçn...</option>
                                    <option value="FullTime">Full-time</option>
                                    <option value="PartTime">Part-time</option>
                                    <option value="Contract">Contract</option>
                                </select>
                                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                    <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                    </svg>
                                </div>
                            </div>
                        </div>

                        <div>
                            <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Ki·ªÉu L∆∞∆°ng</h3>
                            <div className="relative">
                                <select
                                    className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                    value={salaryType}
                                    onChange={(e) => setSalaryType(e.target.value)}
                                >
                                    <option value="">Ch·ªçn...</option>
                                    <option value="monthly">H√†ng th√°ng</option>
                                    <option value="annual">H√†ng nƒÉm</option>
                                    <option value="hourly">Theo gi·ªù</option>
                                </select>
                                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                    <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Additional Information Section */}
                    <div className="mb-8">
                        <h2 className="text-base font-medium mb-4 text-left">Th√¥ng tin th√™m</h2>

                        {/* First row - H·ªçc v·∫•n, Kinh Nghi·ªám, Lo·∫°i c√¥ng vi·ªác */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div>
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">H·ªçc v·∫•n</h3>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={education}
                                        onChange={(e) => setEducation(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="THPT">THPT</option>
                                        <option value="Cao ƒë·∫≥ng">Cao ƒë·∫≥ng</option>
                                        <option value="ƒê·∫°i h·ªçc">ƒê·∫°i h·ªçc</option>
                                        <option value="Th·∫°c sƒ©">Th·∫°c sƒ©</option>
                                        <option value="Ti·∫øn sƒ©">Ti·∫øn sƒ©</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>

                            <div>
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Kinh Nghi·ªám</h3>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={experience}
                                        onChange={(e) => setExperience(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="M·ªõi ƒëi l√†m">M·ªõi ƒëi l√†m</option>
                                        <option value="1 nƒÉm">1 nƒÉm</option>
                                        <option value="2 nƒÉm">2 nƒÉm</option>
                                        <option value="3-5 nƒÉm">3-5 nƒÉm</option>
                                        <option value="Tr√™n 5 nƒÉm">Tr√™n 5 nƒÉm</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>

                            <div>
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Lo·∫°i c√¥ng vi·ªác</h3>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={workType}
                                        onChange={(e) => setWorkType(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="H·ª£p ƒë·ªìng">H·ª£p ƒë·ªìng</option>
                                        <option value="To√†n th·ªùi gian">To√†n th·ªùi gian</option>
                                        <option value="B√°n th·ªùi gian">B√°n th·ªùi gian</option>
                                        <option value="T·ª´ xa">T·ª´ xa</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Second row - V·ªã tr√≠, Ng√†y h·∫øt h·∫°n */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">V·ªã tr√≠</h3>
                                <div className="relative">
                                    <select
                                        className="w-full p-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] appearance-none"
                                        value={location}
                                        onChange={(e) => setLocation(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn...</option>
                                        <option value="ho-chi-minh">H·ªì Ch√≠ Minh</option>
                                        <option value="ha-noi">H√† N·ªôi</option>
                                        <option value="da-nang">ƒê√† N·∫µng</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                    </div>
                                </div>
                            </div>

                            <div>
                                <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Ng√†y h·∫øt h·∫°n</h3>
                                <input
                                    type="date"
                                    className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689]"
                                    value={expirationDate}
                                    onChange={(e) => setExpirationDate(e.target.value)}
                                />
                            </div>
                        </div>
                    </div>

                    {/* Application Options Section */}
                    <div className="bg-gray-50 p-6 rounded-md mb-8">
                        <h2 className="text-base font-medium mb-4 text-left">·ª®ng tuy·ªÉn c√¥ng vi·ªác tr√™n:</h2>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {/* N·ªÅn t·∫£ng option */}
                            <div
                                className={`bg-white p-4 rounded-md border relative cursor-pointer ${applicationType === 'internal' ? 'border-[#309689] ring-1 ring-[#309689]' : 'border-gray-300'}`}
                                onClick={() => setApplicationType('internal')}
                            >
                                <div className="flex items-start">
                                    <div className="flex-shrink-0 mr-3 mt-1">
                                        <div
                                            className={`w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center ${applicationType === 'internal' ? 'bg-[#309689] border-[#309689]' : 'bg-white'
                                                }`}
                                        >
                                            {applicationType === 'internal' && (
                                                <div className="w-2 h-2 bg-white rounded-full"></div>
                                            )}
                                        </div>
                                    </div>
                                    <div className="text-left">
                                        <label className="font-medium text-gray-800 block text-left">N·ªÅn t·∫£ng</label>
                                        <p className="text-gray-500 text-sm mt-1 text-left">
                                            ·ª®ng vi√™n s·∫Ω n·ªôp ƒë∆°n xin vi·ªác b·∫±ng N·ªÅn t·∫£ng v√† t·∫•t c·∫£ c√°c ·ª©ng d·ª•ng s·∫Ω hi·ªÉn th·ªã tr√™n b·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa b·∫°n.
                                        </p>
                                    </div>
                                </div>
                            </div>

                            {/* N·ªÅn t·∫£ng b√™n ngo√†i option */}
                            <div
                                className={`bg-white p-4 rounded-md border relative cursor-pointer ${applicationType === 'external' ? 'border-[#309689] ring-1 ring-[#309689]' : 'border-gray-300'}`}
                                onClick={() => setApplicationType('external')}
                            >
                                <div className="flex items-start">
                                    <div className="flex-shrink-0 mr-3 mt-1">
                                        <div
                                            className={`w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center ${applicationType === 'external' ? 'bg-[#309689] border-[#309689]' : 'bg-white'
                                                }`}
                                        >
                                            {applicationType === 'external' && (
                                                <div className="w-2 h-2 bg-white rounded-full"></div>
                                            )}
                                        </div>
                                    </div>
                                    <div className="text-left">
                                        <label className="font-medium text-gray-800 block text-left">N·ªÅn t·∫£ng b√™n ngo√†i</label>
                                        <p className="text-gray-500 text-sm mt-1 text-left">
                                            ·ª®ng vi√™n n·ªôp ƒë∆°n xin vi·ªác tr√™n trang web c·ªßa b·∫°n, t·∫•t c·∫£ c√°c ·ª©ng d·ª•ng s·∫Ω hi·ªÉn th·ªã tr√™n trang web c·ªßa ri√™ng b·∫°n.
                                        </p>
                                    </div>
                                </div>
                            </div>

                            {/* Tr√™n email c·ªßa b·∫°n option */}
                            <div
                                className={`bg-white p-4 rounded-md border relative cursor-pointer ${applicationType === 'email' ? 'border-[#309689] ring-1 ring-[#309689]' : 'border-gray-300'}`}
                                onClick={() => setApplicationType('email')}
                            >
                                <div className="flex items-start">
                                    <div className="flex-shrink-0 mr-3 mt-1">
                                        <div
                                            className={`w-5 h-5 rounded-full border border-gray-300 flex items-center justify-center ${applicationType === 'email' ? 'bg-[#309689] border-[#309689]' : 'bg-white'
                                                }`}
                                        >
                                            {applicationType === 'email' && (
                                                <div className="w-2 h-2 bg-white rounded-full"></div>
                                            )}
                                        </div>
                                    </div>
                                    <div className="text-left">
                                        <label className="font-medium text-gray-800 block text-left">Tr√™n email c·ªßa b·∫°n</label>
                                        <p className="text-gray-500 text-sm mt-1 text-left">
                                            ·ª®ng vi√™n n·ªôp ƒë∆°n xin vi·ªác t·ªõi ƒë·ªãa ch·ªâ email c·ªßa b·∫°n v√† t·∫•t c·∫£ c√°c ·ª©ng d·ª•ng s·∫Ω hi·ªÉn th·ªã trong email c·ªßa b·∫°n.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Job Description Section */}
                    <div className="mb-8">
                        <h2 className="text-base font-medium mb-2 text-left">M√¥ t·∫£ & Tr√°ch nhi·ªám</h2>
                        <div className="mb-4">
                            <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">M√¥ t·∫£</h3>
                            <textarea
                                placeholder="Th√™m m√¥ t·∫£ c√¥ng vi·ªác c·ªßa b·∫°n..."
                                className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] min-h-[120px] resize-vertical"
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                            />
                        </div>

                        <div>
                            <h3 className="text-sm text-gray-600 mb-2 text-left font-medium">Tr√°ch nhi·ªám</h3>
                            <textarea
                                placeholder="Th√™m tr√°ch nhi·ªám c√¥ng vi·ªác c·ªßa b·∫°n..."
                                className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#309689] focus:border-[#309689] min-h-[120px] resize-vertical"
                                value={responsibilities}
                                onChange={(e) => setResponsibilities(e.target.value)}
                            />
                        </div>
                    </div>

                    {/* Submit Button */}
                    <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '20px' }}>
                        <a
                            href="#"
                            onClick={handleSubmit}
                            style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                backgroundColor: '#309689',
                                color: 'white',
                                padding: '10px 20px',
                                borderRadius: '6px',
                                textDecoration: 'none',
                                fontWeight: '500',
                                fontSize: '16px',
                                border: 'none',
                                minWidth: '150px',
                                cursor: 'pointer'
                            }}
                        >
                            ƒêƒÉng C√¥ng Vi·ªác
                            <svg
                                width="20"
                                height="20"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="white"
                                style={{ marginLeft: '10px' }}
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <path d="M14 5l7 7m0 0l-7 7m7-7H3" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>

            {/* Promotion Popup with job title */}
            <JobPromotionPopup
                isOpen={showPromotionPopup}
                onClose={() => setShowPromotionPopup(false)}
                jobTitle={title || 'Nh√† thi·∫øt k·∫ø UI/UX'}
                onJobPost={handleJobPosting}
                isSubmitting={isSubmitting}
            />
        </>
    );
};

export default JobPostingForm; 